<?xml version="1.0" encoding="UTF-8" ?>
<!-- 
	根节点<configuration>，包含下面三个属性：
	　　　　scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	　　　　scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	　　　　debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration>
	<!-- 子节点<property> ：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。 -->
	<property name="APP_Name" value="springboot-mongodb" /> 
	
	<!-- 子节点<contextName>：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。 -->
　　 <contextName>${APP_Name}</contextName> 

	<!-- 
		子节点<appender>：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名
			ConsoleAppender 把日志输出到控制台
				<encoder>：对日志进行格式化。
				<target>：字符串System.out(默认)或者System.err。
			FileAppender：把日志添加到文件
				<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
				<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
				<encoder>：对记录事件进行格式化。（具体参数稍后讲解）。
				<prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。
			RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。
				<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
				<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
				<layout>:格式化日志信息。
				<rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。
					<fileNamePattern>：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式。
					<maxFileSize>:这是活动文件的大小，默认值是10MB。
					<maxHistory>:可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。
					<totalSizeCap> : 日志文件总体的最大值，达到之后就不再产生日志。
			AsyncAppender：异步记录日志。
				<discardingThreshold>：不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志。
				<queueSize>：更改默认的队列的深度,该值会影响性能.默认值为256。
				<appender-ref>：添加附加的appender,最多只能添加一个。
	 -->
	<appender name="FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${log.path:-.}/springboot-mongodb/project.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
	        <fileNamePattern>${log.path:-.}/springboot-mongodb/project.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
	        <maxFileSize>500MB</maxFileSize>
	        <maxHistory>30</maxHistory>
	        <totalSizeCap>5000MB</totalSizeCap>
	    </rollingPolicy>
		<layout>
			<Pattern>%-20(%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread]) %-5level
				%logger{32} - %msg%n</Pattern>
		</layout>
	</appender>
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<layout>
			<pattern>
				<Pattern>%-20(%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread]) %-5level
				%logger{32} - %msg%n</Pattern>
			</pattern>
		</layout>
	</appender>
	<appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<discardingThreshold>0</discardingThreshold>
		<queueSize>1024</queueSize>
		<appender-ref ref="FILE" />
	</appender>

	<!-- 
		子节点<loger>：用来设置某一个包或具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性
	 -->
	<logger name="mybatis_sql" level="DEBUG" />
	<logger name="com.qk365.fyff.dao" level="DEBUG" />
	
	<!-- 
		子节点<root>:它也是<loger>元素，但是它是根loger,是所有<loger>的上级。只有一个level属性，因为name已经被命名为"root",且已经是最上级了。
	 -->
	<root level="info">
        <appender-ref ref="STDOUT" />
		<appender-ref ref="ASYNC" />
	</root>
	<!-- <root level="debug">
        <appender-ref ref="STDOUT" />
	</root> -->


  <!-- <if condition='property("runMode").contains("prod")'>
	    <then>
	        <root level="info">
				<appender-ref ref="ASYNC" />
				<appender-ref ref="errorAppender" />
			</root>
	    </then>
	     <else>
	        <root level="info">
		        <appender-ref ref="STDOUT" />
				<appender-ref ref="ASYNC" />
				<appender-ref ref="errorAppender" />
			</root>
	     </else>
	  </if> -->
</configuration>